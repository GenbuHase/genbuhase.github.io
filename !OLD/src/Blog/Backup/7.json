{
	"title": "【Mastodon】限定公開機能実装の解説のような。",
	"createdAt": "2018/4/15",
	"content": "※この記事は[過去記事](../6)の続きです。\n※この記事におけるMastodonバージョンは *v2.3.3* となります。また、コードの状態は記事執筆時のものとなります。\n\n\nどうもお久しぶりです。\n最近ずっと開発の方に専念していたので、ブログ側にまで手が回らずに放置していました…:( ;´꒳`;):\nそんな怠慢の末路、恥ずかしい記事が残ってしまいましたので、挽回という形で新しく記事を投げようと思った次第です🙏\n\nさて、[前回の記事](../6)における *非公開トゥート* ですが、今更ながら既存の公開範囲を書き換える必要性が無くなりましたので\n公開範囲を新たに追加する、という形で再製作を行いました。\n\n![限定公開プレビュー](001.png)\n\n名前も一新して *限定公開機能* となりました！！✌(´◉౪◉`)✌\nという訳でソースは[こちら](https://github.com/Itabashi-don/mastodon/commits/feature/limitedToot)です！\n\n当初はリプの公開範囲をリプ元に合わせようという事をしていたのですが、Sidekiqの再試行に悩まされ、結局今の自分の知識では無理だと判断したので実装を諦めました。\n\n\n\n:[v2.3.3との差分](https://github.com/Itabashi-don/mastodon/compare/v2.3.3...feature/limitedToot)をご覧に頂ければ分かるのですが、今回のファイル変更数は12件となっています。\nその内ローカライズデータに3件、フロントエンド側に5件、そしてバックエンド側に4件の変更を加えています。\nまだまだ駆け出しの初心者ですのでこれが大規模なのかどうか分かりませんが、実際にやってみて、比較的容易だったなと思っています。\n\nブログの方も未だにどういう風に書いていけばいいのか分かっておりませんが、とりあえず解説の様なものでもしていきたいと思います:( ;´꒳`;):\n\nまた、開発にあたって参考にさせて頂きました！！ありがとうございます！！🙏🙏🙏\n<Script Src = \"https://gamelinks007.net/embed.js\" Async = \"Async\"></Script>\n<IFrame Class = \"mastodon-embed\" Src = \"https://gamelinks007.net/@S_H_/99691071767594021/embed\" Style = \"Max-Width: 100%; Border: 0\" Width=\"400\"></IFrame>\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">フロントエンド側 - ローカライズ処理</H2>\nひとまず、追加したい項目の名前と@[表示名](表1)を決めます。\nそこから英語と日本語に翻訳すれば大体OKだと思います。\n\n@表1\n<Table Border = \"1\">\n\t<THead>\n\t\t<Tr>\n\t\t\t<Th>ローカライズID</Th>\n\t\t\t<Th>日本語</Th>\n\t\t\t<Th>英語</Th>\n\t\t</Tr>\n\t</THead>\n\t\n\t<Tr>\n\t\t<Th>privacy.limited.short</Th>\n\t\t<Td>限定公開</Td>\n\t\t<Td>Limited</Td>\n\t</Tr>\n\t\n\t<Tr>\n\t\t<Th>privacy.limited.long</Th>\n\t\t<Td>自分がフォローしているユーザーにだけ公開</Td>\n\t\t<Td>Post to followed users only</Td>\n\t</Tr>\n\t\n\t<Tr>\n\t\t<Th>compose_form.limited_disclaimer</Th>\n\t\t<Td>このトゥートは限定公開です。非公開とは違い、自身がフォローしているユーザーにのみ公開されます。</Td>\n\t\t<Td>This post is for followed users. Only users you're following can view ones.</Td>\n\t</Tr>\n</Table>\n@@\n\nこれらを _app/javascript/mastodon/locales_ 直下のローカライズデータに打ち込んでいきます。\n改変後のソースは:[こちら](https://github.com/Itabashi-don/mastodon/compare/v2.3.3...feature/limitedToot#diff-be68e2cbf3d70594c963caa9d60ac578)をご覧下さい。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">フロントエンド側 - privacy_dropdown.js</H2>\nサーバー側より目に見える部分の方が実装していて気が楽になると思います。(precompileがあるのでちょっと微妙ですが…)\nという訳でこちらから改変していきます。\n\n*公開範囲を追加する* という事なので、まず投稿UIを弄りに行きましょう。\n_app/javascript/mastodon_ の下を漁ると _features/compose_ ディレクトリがあります。\nここが投稿時に表示される画面になっています。\n\n試しに _compose_form.js_ を触ってみると、 *PrivacyDropdownContainer* が参照されています。\nそしてその中で *PrivacyDropdown* が参照されています。\n明らかに名前からして怪しい……ですよね？(*´ω｀*)\n\nという訳で覗いてみると、 _this.options_ へ代入している部分があります。\nコードの感じからして、ここに追加すればアイテムも追加されそうです。\nという訳でその部分を書き換えます。\n\nまず、ローカライズに対応させるので最上部の _defineMessages_ メソッドに、先ほど追加したローカライズIDを割り当てます。\nここで使うのは _privacy.limited.short_ と _privacy.limited.long_ の2つです。\n\n次に _this.options_ に項目を追加します。\n既に追加されているものを参考にして記述しました。\n\n改変後は:[このような感じ](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/javascript/mastodon/features/compose/components/privacy_dropdown.js#L164)になりました。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">フロントエンド側 - warning_container.js</H2>\nとりあえずここでprecompileして再起動してみると、公開範囲のドロップダウンに項目が追加されている事が分かります。\nしかし、まだ見栄え的に足りない様な気もします。\nわたしの場合は、非公開のように喚起文を付け加えたいなと思い立ったので、次はそこを改変していきました。\n\n先ほどもあった通り、投稿UIは _features/compose_ の中にあります。\n_index.js_ を見ると *ComposeFormContainer* があり、更にその中を覗くと *ComposeForm* が、そしてその中には *WarningContainer* があります。\n\n_props_ には既に2つ定義されているようです。\n1つは公開範囲が非公開の時、そしてもう1つがハッシュタグを検知した時です。\n\n今回は限定公開の時に喚起文を出すようにしたいので、新たに _props_ に定義を加えます。\n投稿にあたって使用する _visibility_ は\"limited\"なので、とりあえず _needsLockWarning_ をコピーして書き換えて定義しましょう。\n\n次に *WarningWrapper* に実際に表示する喚起文の要素を書いていきます。\nローカライズに対応させるので先と同様に、コピーしてちょちょいと書き換えちゃいましょう👍\n\nローカライズIDは _compose_form.limited_disclaimer_ です。\nこれを参照させて、一応 _defaultMessage_ フィールドにも代入しておきましょう。\n\nという訳で、改変後のソースは:[このよう](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/javascript/mastodon/features/compose/containers/warning_container.js)になります。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">フロントエンド側 - action_bar.js 及び status_action_bar.js</H2>\nここまでは投稿時の処理に注目してきましたが、実際投稿されたトゥートはどのように表示されるのでしょうか。\n限定公開トゥートがブーストされてしまっては困りますし、その他にも色々あるかもしれません。\n(執筆途中にまた一つ不具合を見つけてしまいました…)\n\nという訳で、次はそこら辺を弄っていきます。\n\nまずは限定公開のトゥートのアイコンを決めてみました。\nfaiconsのパッケージ内で探してみて _fa-low-vision_ が丁度いいかなと思いましたので、今回はこれを使っていきます。\n\nトゥートされて表示されるときに「限定公開だよ！！」と表明していなければ、どの公開範囲なのかは分かりません。\nという事なのでアイコンが表示されている領域の *ActionBar* と *StatusActionBar* を覗いてみます。\n\nここでは基本のアイコンが _fa-retweet_ に設定されており、公開範囲によって変更される仕組みになっているようです。\nここを改変して、\"limited\"の時にアイコンが _fa-low-vision_ に変化するようにします。\n\nまた *ActionBar* コンポーネントのみの変更となりますが、ブーストさせないようにさせなければなりません。\n何故か *ActionBar* と *StatusActionBar* では処理の方法が異なるようです。\n統一しちゃえばいいのに…と思うのはわたしだけでしょうか…？\n\nまぁその話は置いておくとして _reblog_disabled_ の取得方法を *StatusActionBar* の処理に合わせ、更にtrueとfalseを反転させました。\nここまでのソースは:[ここ](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/javascript/mastodon/components/status_action_bar.js)と:[ここ](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/javascript/mastodon/features/status/components/action_bar.js)を参照して下さい。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">フロントエンド側 - reducers/compose.js</H2>\nこれがフロントエンド側で最後の変更となります。\n新しく公開範囲を追加した為か、返信時に公開範囲がリプ元のものに合わさってくれない、という問題が発生しました。\n\nという事なので、返信時のReducer側の処理を見てみます。\nなんやかんやあって _compose.js_ に辿り着きました。\n_COMPOSE_REPLY_ の受信時に _privacy_ を設定しているのですが、そこで参照されている _privacyPreference_ では\"limited\"の設定がされていませんので、新しく条件分岐を作ります。\n\nこれでちゃんとリプ元の公開範囲に合わさるようになりました。\nここまでのソースは:[こちら](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/javascript/mastodon/reducers/compose.js)です。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">バックエンド側</H2>\nフロントエンド側の実装は完了したので、次は実際に投稿したり配信する処理を見ていきましょう。\nAPIは全て _app/controller_ の下にあるらしく、漁ってみると _statuses_controller.rb_ がありました。\nこの中では *PostStatusService* が呼ばれていますので、次は定義を探しに行きます。\n\n*PostStatusService* → *DistributionWorker* → *FanOutOnWriteService* という風に配信処理部分まで辿り着くことが出来ました。\nここからが今回の最大の敵だと思います。Ruby超初心者にはかなりキツかったです:( ;´꒳`;):\n\nではここから更に細分化していきましょう。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">バックエンド側 - models/status.rb</H2>\nまず、Rubyの方でも公開範囲を追加します。\n\n*Status* モデルでおもむろに _visibility_ の定義が行われています。\n今回使っているのは\"limited\"です。追加しましょう。しましょう。(大事なことなので2度言いました)\n\nここからは完全にわたしの勘による改変になります。というか言ってしまうとほぼ全て勘ですが(   '-'   )\n最初に _permitted_for_ メソッドの改変を行いました。\n改変してみて分かった事ですが、ここはプロフィール画面での配信に関わっているようです。\n\n_followed_by?_ メソッド(後述)が通る時にのみ _limited_ をpushしています。\nこれで、フォローされていればプロフィール画面からトゥートが見える様になりました。\n\n次に _as_home_timeline_ メソッドの改変です。\nここは…やってみたのですが正直どこが変わったのか分かってません()\n個人的にトゥート数とかの算出に関わりそうだな、って感じのレベルですね…\n\nまぁここは改変なしでも大丈夫な気がします…:( ;´꒳`;):\n\nここまでのソースは:[こちら](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/models/status.rb)です。多分参考にならなそうな気がしますが(;^ω^)\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">バックエンド側 - models/concerns/account_interactions.rb</H2>\n限定公開は *自分がフォローしているユーザー* に対して配信します。\n実装にあたって、自分のフォローしているユーザーのリストが必要になります。\n\n*Account* モデルには _following?_ メソッドは既に定義されているのですが、今回取得したい _followed_by?_ メソッドは見当たりません。\n「見つからない…どうしよう…」となるぐらいなら実装してしまおう！という事で実装しました(白目)\n\n*Account* モデルが参照している _account_interactions.rb_ に _following?_ の定義があります。\nわたしの場合ですが、その下に _followed_by?_ メソッドを新しく定義しました。\n\n最初は _where_ メソッドで _target_account_ を指定していたのですが、上手く行かなかったので _account_ にしてみたところ動作しました。\nつまり偶然と勘です。勘って大事だね(爆)\n\nここまでのソースコードは:[こちら](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/models/concerns/account_interactions.rb)になります。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">バックエンド側 - services/fan_out_on_write_service.rb</H2>\n_call_ メソッド部分でDMの時にのみ _deliver_to_mentioned_followers_ メソッドが実行されています。\nここで条件分岐して配信を分けているのだろうと思われます。\n限定公開の時も処理が変わるように、ここに条件分岐を追加して _deliver_to_followed_users_ メソッドを実行させます。\n\nさて、では本命の _deliver_to_followed_users_ メソッドを見ていきます。\n\nここで一旦配信条件を整理します。\n*自分のフォロワーであること* 且つ *自分がフォローしていること* が条件です。こうやって文字にすると結構良かったりします。\nバラバラになって分からなくなった時に是非やってみると纏まるかと思いますよ(*´ω｀*)\n\nはい、という訳で条件の整理が出来ましたので、この条件で配信されるようにコードを実装していきます。\nここまでの:[コード](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/services/fan_out_on_write_service.rb)はこちらです。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">バックエンド側 - workers/activitypub/distribution_worker.rb</H2>\nここが最後の改変になります。\n限定公開をサポートしていない外部インスタンスには、有無を言わせず流れていってしまいます。\nこれはかなり困ります。限定の意味が全く無くなってしまいます。\n\nという事なので最終手段で、そもそも *外部に流さない* ようにしましょう。\nそこで外部への配信処理を見ていきます。\n先ほど辿った *PostStatusService* にて、複数の *DistributionWorker* が呼ばれています。\n\nこれらの一つ、ActivityPubのDistributionWorkerを確認してみます。\n_workers/activitypub/distribution_worker.rb_ は数十行程度のかなり短いコードです。\n\nその中の _skip_distribution?_ メソッドで、外部に流すか流さないか判断している模様です。\n限定公開トゥート自体を流さない様にするので、条件を追加しましょう。\n\nここのソースは:[こちら](https://github.com/Itabashi-don/mastodon/blob/59b522982d6137ed659ce81c5fcc503e2463d98d/app/workers/activitypub/distribution_worker.rb)になります。\n\n\n\n<H2 Class = \"mdc-typography--subheading2\">実装してみて考察とかなんやら。</H2>\nまずRubyやRailsなど、見たことも触った事もない所からここまで来るのに相当の時間を要してしまった気がします。\n基本的な所の理解が未だに出来ていなかったりしましたが、結構楽しかったです。\nただ、今までろくにブログを書いたことがなかったのでどうやって書いていいか迷いました:( ;´꒳`;):\n\n-じゃあ書かなきゃいいって話なんですけど(爆)-\n\nこの限定公開の実装にあたって、わたしを突き動かしてくれた一言がありました。\nこの場をお借りして感謝申し上げます。本当にありがとう🙏🙏🙏\n\nこれからも楽しく色々実装していけたらな、そして実装を通じて色んな知識を蓄えていけたらな、と思います。\n長々と書き連ねてしまって本当にごめんなさい。ここまで見て頂いた方々、本当にありがとうございます。\nそして前回の記事に関して、不十分な状態で広まってしまったことをお詫び申し上げます。\n\nかなりの未熟者ですが、これからも見守ってて下さいませ。\nではまた(*･ω･)*_ _)"
}